// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	trcache "github.com/rrgmc/trcache"
	mock "github.com/stretchr/testify/mock"
)

// RefreshCache is an autogenerated mock type for the RefreshCache type
type RefreshCache[K comparable, V interface{}] struct {
	mock.Mock
}

type RefreshCache_Expecter[K comparable, V interface{}] struct {
	mock *mock.Mock
}

func (_m *RefreshCache[K, V]) EXPECT() *RefreshCache_Expecter[K, V] {
	return &RefreshCache_Expecter[K, V]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key, options
func (_m *RefreshCache[K, V]) Delete(ctx context.Context, key K, options ...trcache.IOption[trcache.IDeleteOpt]) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, K, ...trcache.IOption[trcache.IDeleteOpt]) error); ok {
		r0 = rf(ctx, key, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RefreshCache_Delete_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
//   - options ...trcache.IOption[trcache.IDeleteOpt]
func (_e *RefreshCache_Expecter[K, V]) Delete(ctx interface{}, key interface{}, options ...interface{}) *RefreshCache_Delete_Call[K, V] {
	return &RefreshCache_Delete_Call[K, V]{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, key}, options...)...)}
}

func (_c *RefreshCache_Delete_Call[K, V]) Run(run func(ctx context.Context, key K, options ...trcache.IOption[trcache.IDeleteOpt])) *RefreshCache_Delete_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trcache.IOption[trcache.IDeleteOpt], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trcache.IOption[trcache.IDeleteOpt])
			}
		}
		run(args[0].(context.Context), args[1].(K), variadicArgs...)
	})
	return _c
}

func (_c *RefreshCache_Delete_Call[K, V]) Return(_a0 error) *RefreshCache_Delete_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshCache_Delete_Call[K, V]) RunAndReturn(run func(context.Context, K, ...trcache.IOption[trcache.IDeleteOpt]) error) *RefreshCache_Delete_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key, options
func (_m *RefreshCache[K, V]) Get(ctx context.Context, key K, options ...trcache.IOption[trcache.IGetOpt]) (V, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 V
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, K, ...trcache.IOption[trcache.IGetOpt]) (V, error)); ok {
		return rf(ctx, key, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, K, ...trcache.IOption[trcache.IGetOpt]) V); ok {
		r0 = rf(ctx, key, options...)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(context.Context, K, ...trcache.IOption[trcache.IGetOpt]) error); ok {
		r1 = rf(ctx, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RefreshCache_Get_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
//   - options ...trcache.IOption[trcache.IGetOpt]
func (_e *RefreshCache_Expecter[K, V]) Get(ctx interface{}, key interface{}, options ...interface{}) *RefreshCache_Get_Call[K, V] {
	return &RefreshCache_Get_Call[K, V]{Call: _e.mock.On("Get",
		append([]interface{}{ctx, key}, options...)...)}
}

func (_c *RefreshCache_Get_Call[K, V]) Run(run func(ctx context.Context, key K, options ...trcache.IOption[trcache.IGetOpt])) *RefreshCache_Get_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trcache.IOption[trcache.IGetOpt], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trcache.IOption[trcache.IGetOpt])
			}
		}
		run(args[0].(context.Context), args[1].(K), variadicArgs...)
	})
	return _c
}

func (_c *RefreshCache_Get_Call[K, V]) Return(_a0 V, _a1 error) *RefreshCache_Get_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshCache_Get_Call[K, V]) RunAndReturn(run func(context.Context, K, ...trcache.IOption[trcache.IGetOpt]) (V, error)) *RefreshCache_Get_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// GetOrRefresh provides a mock function with given fields: ctx, key, options
func (_m *RefreshCache[K, V]) GetOrRefresh(ctx context.Context, key K, options ...trcache.IOption[trcache.IRefreshOpt]) (V, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 V
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, K, ...trcache.IOption[trcache.IRefreshOpt]) (V, error)); ok {
		return rf(ctx, key, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, K, ...trcache.IOption[trcache.IRefreshOpt]) V); ok {
		r0 = rf(ctx, key, options...)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(context.Context, K, ...trcache.IOption[trcache.IRefreshOpt]) error); ok {
		r1 = rf(ctx, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshCache_GetOrRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrRefresh'
type RefreshCache_GetOrRefresh_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// GetOrRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
//   - options ...trcache.IOption[trcache.IRefreshOpt]
func (_e *RefreshCache_Expecter[K, V]) GetOrRefresh(ctx interface{}, key interface{}, options ...interface{}) *RefreshCache_GetOrRefresh_Call[K, V] {
	return &RefreshCache_GetOrRefresh_Call[K, V]{Call: _e.mock.On("GetOrRefresh",
		append([]interface{}{ctx, key}, options...)...)}
}

func (_c *RefreshCache_GetOrRefresh_Call[K, V]) Run(run func(ctx context.Context, key K, options ...trcache.IOption[trcache.IRefreshOpt])) *RefreshCache_GetOrRefresh_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trcache.IOption[trcache.IRefreshOpt], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trcache.IOption[trcache.IRefreshOpt])
			}
		}
		run(args[0].(context.Context), args[1].(K), variadicArgs...)
	})
	return _c
}

func (_c *RefreshCache_GetOrRefresh_Call[K, V]) Return(_a0 V, _a1 error) *RefreshCache_GetOrRefresh_Call[K, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshCache_GetOrRefresh_Call[K, V]) RunAndReturn(run func(context.Context, K, ...trcache.IOption[trcache.IRefreshOpt]) (V, error)) *RefreshCache_GetOrRefresh_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *RefreshCache[K, V]) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RefreshCache_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type RefreshCache_Name_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *RefreshCache_Expecter[K, V]) Name() *RefreshCache_Name_Call[K, V] {
	return &RefreshCache_Name_Call[K, V]{Call: _e.mock.On("Name")}
}

func (_c *RefreshCache_Name_Call[K, V]) Run(run func()) *RefreshCache_Name_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RefreshCache_Name_Call[K, V]) Return(_a0 string) *RefreshCache_Name_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshCache_Name_Call[K, V]) RunAndReturn(run func() string) *RefreshCache_Name_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, options
func (_m *RefreshCache[K, V]) Set(ctx context.Context, key K, value V, options ...trcache.IOption[trcache.ISetOpt]) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, K, V, ...trcache.IOption[trcache.ISetOpt]) error); ok {
		r0 = rf(ctx, key, value, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RefreshCache_Set_Call[K comparable, V interface{}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key K
//   - value V
//   - options ...trcache.IOption[trcache.ISetOpt]
func (_e *RefreshCache_Expecter[K, V]) Set(ctx interface{}, key interface{}, value interface{}, options ...interface{}) *RefreshCache_Set_Call[K, V] {
	return &RefreshCache_Set_Call[K, V]{Call: _e.mock.On("Set",
		append([]interface{}{ctx, key, value}, options...)...)}
}

func (_c *RefreshCache_Set_Call[K, V]) Run(run func(ctx context.Context, key K, value V, options ...trcache.IOption[trcache.ISetOpt])) *RefreshCache_Set_Call[K, V] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trcache.IOption[trcache.ISetOpt], len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(trcache.IOption[trcache.ISetOpt])
			}
		}
		run(args[0].(context.Context), args[1].(K), args[2].(V), variadicArgs...)
	})
	return _c
}

func (_c *RefreshCache_Set_Call[K, V]) Return(_a0 error) *RefreshCache_Set_Call[K, V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshCache_Set_Call[K, V]) RunAndReturn(run func(context.Context, K, V, ...trcache.IOption[trcache.ISetOpt]) error) *RefreshCache_Set_Call[K, V] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRefreshCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshCache creates a new instance of RefreshCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshCache[K comparable, V interface{}](t mockConstructorTestingTNewRefreshCache) *RefreshCache[K, V] {
	mock := &RefreshCache[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
